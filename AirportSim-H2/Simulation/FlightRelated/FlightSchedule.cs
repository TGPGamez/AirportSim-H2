using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static AirportSim_H2.Simulation.Delegates;

namespace AirportSim_H2.Simulation.FlightRelated
{
    public class FlightSchedule
    {
        public MessageEvent FlightInfo { get; set; }
        public MessageEvent FlightExceptionInfo { get; set; }

        private static Random rand = new Random();

        public List<Flight> Flights { get; private set; }
        public List<Flight> FlightDisplay { get; private set; }
        public int FlightDisplayLength { get; private set; }
        public Time Time { get; private set; }

        public FlightSchedule(Time time, int flightDisplayLength)
        {
            Time = time;
            Flights = new List<Flight>();
            FlightDisplay = new List<Flight>();
            FlightDisplayLength = flightDisplayLength;
        }

        internal void GenerateFlights(int activityLevel, bool isAutoGeneratedReservationsEnabled)
        {
            while (Flights.Count < 1000)
            {
                DateTime startArrival = Time.DateTime.AddMinutes(120);
                if (Flights.Count > 0)
                {
                    startArrival = Flights.OrderByDescending(x => x.Arrival).FirstOrDefault().Arrival;
                }

                Flight flight = AutoGenerator.CreateRandomFlight(startArrival, 0, 600 / activityLevel);

                if (isAutoGeneratedReservationsEnabled)
                {
                    flight.AutoBookFlightTickets(activityLevel * 10);
                }
                flight.FlightInfo = FlightInfo;
                flight.FlightExceptionInfo = FlightExceptionInfo;

                AddFlight(flight);
            }
        }

        internal void AddFlight(Flight flight)
        {
            Flights.Add(flight);
        }

        internal void RemoveExpiredFlights()
        {
            if (Flights.Count > 0)
            {
                Flights.RemoveAll(x => x.Departure < Time.DateTime);
            }
        }

        internal void UpdateFlightsStatuses()
        {
            for (int i = 0; i < Flights.Count; i++)
            {
                Flights[i].UpdateStatus(Time);
            }
        }

        internal void UpdateFlightDisplay()
        {
            List<Flight> flights = Flights.OrderBy(x => x.Departure).ToList();
            FlightDisplay.Clear();

            for (int i = 0; i < flights.Count; i++)
            {
                if (i >= FlightDisplayLength)
                {
                    break;
                } else
                {
                    FlightDisplay.Add(flights[i]);
                }
            }
        }
    }
}
