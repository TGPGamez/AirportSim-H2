using System;
using System.Collections.Generic;
using System.Linq;

namespace AirportLib
{
    public class FlightSchedule
    {
        public event MessageEvent FlightInfo;
        public event MessageEvent FlightExceptionInfo;
        public event UpdatedEvent ScheduleUpdated;

        public Time Time { get; private set; }
        public List<Flight> Flights { get; private set; }
        public List<Flight> ActiveFlights { get; private set; }

        public FlightSchedule(Time time)
        {
            Time = time;
            Flights = new List<Flight>();
            ActiveFlights = new List<Flight>();
        }

        internal void Clear()
        {
            Flights.Clear();
            ActiveFlights.Clear();
        }

        internal void AddFlight(Flight flight)
        {
            Flights.Add(flight);
        }

        internal void UpdateFlightsStatuses()
        {
            for (int i = 0; i < Flights.Count; i++)
            {
                Flights[i].UpdateStatus(Time);
            }
        }

        internal void RemoveExpiredFlights()
        {
            if (Flights.Count > 0)
            {
                Flights.RemoveAll(x => x.Departure < Time.DateTime);
            }
        }

        internal void GenerateFlights(int activityLevel, bool isAutoGeneratedReservationsEnabled)
        {
            while (Flights.Count < 1000)
            {
                DateTime startArrival = Time.DateTime.AddMinutes(120);
                if (Flights.Count > 0)
                {
                    startArrival = Flights.OrderByDescending(x => x.Arrival).FirstOrDefault().Arrival;
                }

                Flight flight = AutoGenerator.CreateRandomFlight(startArrival, 0, 600 / activityLevel);

                if (isAutoGeneratedReservationsEnabled)
                {
                    flight.AutoBookFlightTickets(activityLevel * 10);
                }
                flight.FlightInfo += FlightInfo;
                flight.FlightExceptionInfo += FlightExceptionInfo;

                AddFlight(flight);
            }
        }

        internal void UpdateActiveFlights()
        {
            List<Flight> flights = Flights.FindAll(f => f.Status != FlightStatus.OpenForReservation)
                .OrderBy(f => f.Departure)
                .ToList();

            
            if (flights.Count != ActiveFlights.Count)
            {
                ActiveFlights = flights;
                ScheduleUpdated?.Invoke();
            }
            else
            {
                for (int i = 0; i < ActiveFlights.Count; i++)
                {
                    if (ActiveFlights[i] != flights[i])
                    {
                        ActiveFlights = flights;
                        ScheduleUpdated?.Invoke();
                    }
                }
            }
        }
    }
}
